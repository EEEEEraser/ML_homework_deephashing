import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision import datasets, transforms
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm

# 指定支持中文的字体文件路径
font_path = 'C:/Windows/Fonts/simhei.ttf'  # Windows 上的示例路径，需根据实际情况修改

# 加载字体文件
prop = fm.FontProperties(fname=font_path)

# 设置 matplotlib 的默认字体为加载的字体
plt.rcParams['font.family'] = prop.get_name()

# 如果有需要，可以设置特定的字体属性
plt.rcParams['font.sans-serif'] = [prop.get_name()]
plt.rcParams['axes.unicode_minus'] = False  # 处理负号显示问题


# 定义深度哈希网络
class DeepHashNet(nn.Module):
    def __init__(self, input_size, embedding_size, bin_count):
        super(DeepHashNet, self).__init__()
        # 特征提取网络部分，需要调整以确保输出尺寸正确
        self.features = nn.Sequential(
            nn.Conv2d(1, 64, kernel_size=5, stride=1, padding=2),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2, stride=2),  # 输出尺寸 14x14
            nn.Conv2d(64, 128, kernel_size=5, stride=1, padding=2),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2, stride=2)  # 输出尺寸 7x7
        )
        self.flatten_size = 128 * 7 * 7  # 展平后的尺寸
        # 哈希编码层
        self.hash_layers = nn.ModuleList([nn.Sequential(
            nn.Linear(self.flatten_size, 512),  # 确保输入维度与特征张量维度匹配
            nn.ReLU(),
            nn.Linear(512, 1),
            nn.Sigmoid()
        ) for _ in range(bin_count)])

    def forward(self, x):
        x = self.features(x)
        x = x.view(x.size(0), -1)  # 正确展平特征张量
        hash_codes = [layer(x) for layer in self.hash_layers]
        hash_codes = torch.cat(hash_codes, dim=1)  # 拼接所有二进制位
        return hash_codes

# 加载数据集
transform = transforms.Compose([transforms.Grayscale(), transforms.ToTensor()])
train_dataset = datasets.MNIST(root='./data', train=True, download=True, transform=transform)
test_dataset = datasets.MNIST(root='./data', train=False, transform=transform)

# 初始化模型和参数
input_size = 28  # MNIST图像大小
embedding_size = 128  # 特征维度
bin_count = 16  # 二进制哈希码的长度
model = DeepHashNet(input_size, embedding_size, bin_count)

# 辅助函数：显示图像
def display_images(test_image, nearest_train_image, distance):
    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.imshow(test_image.squeeze(), cmap='gray')
    plt.title("测试图像")
    plt.axis('off')

    plt.subplot(1, 2, 2)
    plt.imshow(nearest_train_image.squeeze(), cmap='gray')
    plt.title(f"最近邻 (汉明距离: {distance})")
    plt.axis('off')
    plt.show()

def test_and_retrieve(model, test_loader, train_loader, train_dataset):
    model.eval()
    train_features = []
    train_indices = []

    with torch.no_grad():
        for images, indices in train_loader:
            images = images.to(device)
            codes = model(images)
            train_features.extend(codes.detach().cpu().numpy())
            train_indices.extend(indices.numpy())

    train_features = np.array(train_features)  # 转换为NumPy数组

    for test_images, _ in test_loader:
        for test_image in test_images:
            test_image = test_image.unsqueeze(0).to(device)
            test_code = model(test_image).detach().cpu().numpy().squeeze()

            # 计算汉明距离
            batch_distances = np.sum(test_code != train_features, axis=1)
            nearest_index = np.argmin(batch_distances)

            # 使用索引从训练数据集中获取最近邻图像
            nearest_train_image_index = train_indices[nearest_index]
            nearest_train_image = train_dataset[nearest_train_image_index][0].numpy()

            # 显示测试图像和最近邻图像
            display_images(test_image.cpu().numpy().squeeze(), nearest_train_image, batch_distances[nearest_index])

# 设备配置
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model.to(device)
# 创建数据加载器
train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=64, shuffle=True)
test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=64, shuffle=False)
# 运行测试和检索
test_and_retrieve(model, test_loader, train_loader, train_dataset)
